// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FundDataMaintenanceSpecs.Features.Sign_In
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Sign-in")]
    public partial class Sign_InFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Sign-In.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Sign-in", "In order to avoid anybody from editing fund data information\r\nI want to be asked " +
                    "to authenticate myself", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void AppropriateFormFieldsAreAvailable(string field_Name, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("appropriate form fields are available", exampleTags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("I am on the sign-in page");
#line 7
 testRunner.Then(string.Format("the {0} field is presented", field_Name));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("appropriate form fields are available")]
        public virtual void AppropriateFormFieldsAreAvailable_AppropriateFormFieldsAreAvailable_Username()
        {
            this.AppropriateFormFieldsAreAvailable("Username", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("appropriate form fields are available")]
        public virtual void AppropriateFormFieldsAreAvailable_AppropriateFormFieldsAreAvailable_Password()
        {
            this.AppropriateFormFieldsAreAvailable("Password", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("appropriate form fields are available")]
        public virtual void AppropriateFormFieldsAreAvailable_AppropriateFormFieldsAreAvailable_RememberMe()
        {
            this.AppropriateFormFieldsAreAvailable("RememberMe", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("unable to login when provide no credentials")]
        public virtual void UnableToLoginWhenProvideNoCredentials()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("unable to login when provide no credentials", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("I am on the sign-in page");
#line 17
 testRunner.When("I click the sign-in button");
#line 18
 testRunner.Then("the sign-in page will be displayed with an error");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("unable to login when only my cg initials are provided")]
        public virtual void UnableToLoginWhenOnlyMyCgInitialsAreProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("unable to login when only my cg initials are provided", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("I am on the sign-in page");
#line 22
 testRunner.And("I enter my username");
#line 23
 testRunner.When("I click the sign-in button");
#line 24
 testRunner.Then("the sign-in page will be displayed with an error");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("unable to login when only my password is provided")]
        public virtual void UnableToLoginWhenOnlyMyPasswordIsProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("unable to login when only my password is provided", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("I am on the sign-in page");
#line 28
 testRunner.And("I enter my password");
#line 29
 testRunner.When("I click the sign-in button");
#line 30
 testRunner.Then("the sign-in page will be displayed with an error");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void UnableToLoginWhenIProvideOneIncorrectAndOneCorrectField(string field_1, string field_2, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("unable to login when I provide one incorrect and one correct field", exampleTags);
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given("I am on the sign-in page");
#line 34
 testRunner.And(string.Format("I correctly enter my {0}", field_1));
#line 35
 testRunner.And(string.Format("I incorrectly enter my {0}", field_2));
#line 36
 testRunner.When("I click the sign-in button");
#line 37
 testRunner.Then("the sign-in page will be displayed with an error");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("unable to login when I provide one incorrect and one correct field")]
        public virtual void UnableToLoginWhenIProvideOneIncorrectAndOneCorrectField_UnableToLoginWhenIProvideOneIncorrectAndOneCorrectField_Username()
        {
            this.UnableToLoginWhenIProvideOneIncorrectAndOneCorrectField("Username", "Password", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("unable to login when I provide one incorrect and one correct field")]
        public virtual void UnableToLoginWhenIProvideOneIncorrectAndOneCorrectField_UnableToLoginWhenIProvideOneIncorrectAndOneCorrectField_Password()
        {
            this.UnableToLoginWhenIProvideOneIncorrectAndOneCorrectField("Password", "Username", ((string[])(null)));
        }
    }
}
#pragma warning restore
#endregion
